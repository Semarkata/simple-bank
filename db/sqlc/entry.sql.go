// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: entry.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createEntrie = `-- name: CreateEntrie :one
INSERT INTO entries (
  account_id,
  amount
) VALUES (
  $1, $2
) RETURNING entrie_id, account_id, amount, created_at
`

type CreateEntrieParams struct {
	AccountID uuid.UUID `json:"account_id"`
	Amount    int64     `json:"amount"`
}

// Create
func (q *Queries) CreateEntrie(ctx context.Context, arg CreateEntrieParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntrie, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.EntrieID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT entrie_id, account_id, amount, created_at FROM entries
WHERE entrie_id = $1 LIMIT 1
`

// Read One
func (q *Queries) GetEntry(ctx context.Context, entrieID uuid.UUID) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, entrieID)
	var i Entry
	err := row.Scan(
		&i.EntrieID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT entrie_id, account_id, amount, created_at FROM entries
WHERE account_id = $1
ORDER BY entrie_id
LIMIT $2 
OFFSET $3
`

type ListEntriesParams struct {
	AccountID uuid.UUID `json:"account_id"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

// Read Many
func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.EntrieID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
